Pattern pattern = Pattern.compile("somePattern");
Matcher matcher = pattern.matcher();
String pattern = "(.*)(\\d+)(.*)";
{//основной список метасимволов
	Вот примеры основных метасимволов:
  ^     - (крышка, цирркумфлекс) начало проверяемой строки
  $     - (доллар) конец проверяемой строки
  .     - (точка) представляет собой сокращенную форму записи для символьного класса, совпадающего с любым символом
  |     -  означает «или». Подвыражения, объединенные этим способом, называются альтернативами (alternatives)
  ?     - (знак вопроса) означает, что предшествующий ему символ является необязательным
  +     -  обозначает «один или несколько экземпляров непосредственно предшествующего элемента
  *     –  любое количество экземпляров элемента (в том числе и нулевое)
  \\d   –  цифровой символ
  \\D   –  не цифровой символ
  \\s   –  пробельный символ
  \\S   –  не пробельный символ
  \\w   –  буквенный или цифровой символ или знак подчёркивания
  \\W   –  любой символ, кроме буквенного или цифрового символа или знака подчёркивания
}

// XML тэг в формате <xxx></xxx>
Pattern pattern = Pattern.compile("^<([a-z]+)([^>]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)$");

Также в качестве второго параметра в метод compile можно передать флаг 
в виде статической константы класса Pattern, например:

// email адрес в формате xxx@xxx.xxx (регистр букв игнорируется)
Pattern pattern = Pattern.compile("^([a-z0-9_\\.-]+)@([a-z0-9_\\.-]+)\\.([a-z\\.]{2,6})$", Pattern.CASE_INSENSITIVE);

Также иногда возникает необходимость разбить строку на массив подстрок используя РВ. В этом нам поможет метод split:

Pattern pattern = Pattern.compile(":|;");
String[] animals = pattern.split("cat:dog;bird:cow");
Arrays.asList(animals).forEach(animal -> System.out.print(animal + " "));

Пакет java.util.regex исходно состоит из следующих трех классов:

Pattern Class – /*Объект класса Pattern представляет скомпилированное представление регулярного выражения. 
В классе Pattern публичный конструктор не предусмотрен. Для создания шаблона, вам сперва необходимо вызвать 
один из представленных публичных статичных методов compile(), который далее произведет возврат объекта класса Pattern. 
Регулярное выражение в данных методах принимается как первый аргумент.*/
Matcher Class – /*Объект класса Matcher представляет механизм, который интерпретирует шаблон, 
а также производит операции сопоставления с вводимой строкой. Аналогично классу Pattern, 
Matcher не содержит публичных конструкторов. Объект класса Matcher может быть получен 
путем вызова метода matcher() на объекте класса Pattern.*/
PatternSyntaxException – /*Объект класса PatternSyntaxException представляет непроверяемое исключение, 
которое обозначает синтаксическую ошибку в шаблоне регулярного выражения.*/